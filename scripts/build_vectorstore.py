import os
import json
import re
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.schema import Document
from tqdm import tqdm


data_folder = os.path.join("data")
vectorstore_path = os.path.join("vectorstore")


chunk_pattern = re.compile(r"^chunks\.json$")
# Function to clean text
def clean_chunk(text: str) -> str:
    patterns = [
    r"Retour en haut",
    r"Derni√®re mise √† jour\s*:.*",
    r"Navigation de pied de page.*",
    r"Gouvernement du Qu√©bec",
    r"Abonnements.*?Flux RSS",
    r"En savoir plus",
    r"√Ä propos de l‚Äôorganisation",
    r"S'abonner.*?",
    r"^Page \d+ sur \d+",
    r"Page \d+(\n\d+)?",                   
    r"Footer navigation \| Qu√©bec\.ca",    
    r"Back to top",                        
    r"Pagination\npage n¬∞\d+ sur \d+",      
    r"Joindre les responsables des relations avec les m√©dias",
    r"Liste des responsables des relations avec les m√©dias",
    r"Voir plus",
    r"Page courante",
    r"Cabinet du premier ministre",
    r"Flux RSS",
    r"¬©\s*Gouvernement du Qu√©bec.*",
    r"Politique de confidentialit√©",
    r"Plan du site",
    r"Contact",
    r"Accueil",
    r"Voir aussi",
    r"Plus d['‚Äô]infos",
    r"Tous droits r√©serv√©s",
    r"Cookies",
    r"FAQ",
    r"Conditions d‚Äôutilisation",
    r"Accessibilit√©",
    r"Aide",
    r"Recherche",
    r"Newsletter",
    r"Langue",
    r"Suivez-nous",
    r"¬©.*\d{4}",
    r"Page pr√©c√©dente",
    r"Page suivante",
    r"Fermer",
    r"Navigation principale",
    r"Menu",
    r"Connexion",
    r"D√©connexion",
    r"Version imprimable",
    r"Fil d‚Äôariane",
    r"Imprimer",
    r"Partager",
    r"Sitemap",
    r"Informations l√©gales",
    r"Mentions l√©gales",
    r"Conditions g√©n√©rales",
    r"R√©seaux sociaux",
    r"Nouvelle fen√™tre",
    r"\n+",
    r"Tous droits r√©serv√©s",
    r"D√©claration de confidentialit√©",
    r"√ânonc√© de confidentialit√©",
    r"Mise √† jour le \d{1,2} \w+ \d{4}",
    r"Impossible de trouver la page.*",
    r"English",
    r"Espa√±ol",
    r"Portugu√™s",
    r"Êó•Êú¨Ë™û",
    r"Italiano",
    r"Deutsch",
    r"ÌïúÍµ≠Ïñ¥",
    r"‰∏≠Êñá, Ê±âËØ≠",
    r"‰∏≠Êñá, Êº¢Ë™û",
    r"Nederlands",
    r"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    r"Veuillez pr√©ciser la nature du probl√®me",
    r"Don't fill this field!",
    r"Votre commentaires serviront √† bonifier Qu√©bec\.ca.*",
    r"Metiers Qu√©bec",
    r"Image",
    r"La pand√©mie de la COVID-19",
    r"Cabinet du ministre d√©l√©gu√© √† l'√âconomie.*",  
    r"Page \d+",                            
    r"page n¬∞0 sur 0",                       
    r"Page \d+\n\d+",                        
    r"Joindre les responsables des relations .*", 
    r"Page \d+\nPage \d+",
    r"Joindre les responsables des relations avec les m√©dias\s*Liste des responsables des relations avec les m√©dias\s*Gouvernement du Qu√©bec\s*Navigation de pied de page de Qu√©bec\.ca\s*Retour en haut",
    r"Pagination\s*page n¬∞\d+ sur \d+\s*(?:\.\n)?(?:Page \d+\n?)+- Page courante\n(?:Page \d+\n?)+\.?",
    r"(Cabinet|Commission)[^\n]+\n(?:.|\n)+?Retour en haut",
    r"Page \d+\n\d+",
    r"(Cabinet du|Commission|D√©l√©gation)[^\n]+\n(?:.|\n)+?Retour en haut",
    r"D√©l√©gation g√©n√©rale du Qu√©bec √† Bruxelles",
    r"Cabinet du ministre de l'Agriculture, des P√™cheries et de l'Alimentation",
    r"JavaScript is disabled\s+In order to continue, we need to verify that you're not a robot\.\s+This requires JavaScript\. Enable JavaScript and then reload the page\.",
    r"Would you like to add any details\?\s+Do not include any personal information .+?\.\s+Your comments will be used to improve Qu√©bec\.ca and may be used for statistical purposes\. Please note that we will not be able to provide individual responses\.\s+Please describe the problem\s+Don't fill this field!",
    r"MISE EN GARDE √Ä LA POPULATION",
    r"Lire le communiqu√©",
    r"Agriculture, P√™cheries et Alimentation",
    r"Conseil des arts et des lettres du Qu√©bec",
    r"Tourisme",
    r"R√©gie des march√©s agricoles et alimentaires du Qu√©bec",
    r"Centre d'acquisitions gouvernementales",
    r"Bureau du Qu√©bec √† Barcelone",
    r"Archives des nouvelles relatives √† For√™ts, Faune et Parcs",
    r"Langue fran√ßaise",
    r"Office des personnes handicap√©es du Qu√©bec",
    r"D√©l√©gation g√©n√©rale du Qu√©bec √† Bruxelles",
    r"CABINET DE LA MINISTRE DE L'√âCONOMIE, DE L'INNOVATION ET DE L'√âNERGIE ET MINISTRE RESPONSABLE DU D√âVELOPPEMENT √âCONOMIQUE R√âGIONAL",
    r"Lire le communiqu√©",
    r"Autorit√© des march√©s financiers",
    r"Contact information for media relations officials",
    r"Media relations officials in the departments and agencies \(in French only\)",
    r"Footer navigation \| Qu√©bec\.ca",
    r"Paginate",  
    r"- Current page",
    r"MONTREAL, Jan\. \d{1,2}, \d{4}",  
    r"MONTR√âAL, le \d+ \w+ \d{4} /CNW/ - .+",
    r"QU√âBEC, le \d+ \w+ \d{4} ‚Äì .+",
    r"H√©ma-Qu√©bec",
    r"Secr√©tariat aux relations avec les Premi√®res Nations et les Inuit",
    r"Institut national de la recherche scientifique",
    r"Drummondville centre key to plasma self-sufficiency strategy MONTR√âAL, April \d+, 2024 /CNW/ - .+",
    r"Paginate\s+page n¬∞0 of 0",  
    r"Page \d+",
    r"Contact information for media relations officials",
    r"Media relations officials in the departments and agencies \(in French only\)",
    r"Footer navigation \| Qu√©bec\.ca",
    r"Back to top",
    r"- Current page",
    r"Paginate",
    r"Soci√©t√© du Plan Nord",
    r"Palais des congr√®s de Montr√©al",
    r"Protecteur du citoyen",
    r"Centre int√©gr√© universitaire de sant√© et de services sociaux de l'Est-de-l'√éle-de-Montr√©al",
    r"Qu√©bec Government Office in Brussels",
    r"Institut national de la recherche scientifique",
    r"Voir plus",
    r"Derni√®re mise √† jour : \d{1,2} \w+ \d{4}",
    r"√Ä propos de l‚Äôorganisation",
    r"Abonnements",
    r"S'abonner au fil de presse",
    r"Flux RSS",
    r"Suivez-nous",
    r"Cabinet de la vice-premi√®re ministre et ministre des Transports et de la Mobilit√© durable",
    r"Chacun de\nnous a un r√¥le √† jouer dans l'am√©lioration du bilan routier.*",
    r"Le nouveau gouvernement du Qu√©bec travaillera en collaboration avec la Ville de Montr√©al",
    r"Se renseigner sur .+",
    r"Mise √† jour le \d{1,2} \w+ \d{4}",
    r"Paginate\s*page n¬∞0 of 0",
    r"Page \d+",
    r"Pagination\s*page n¬∞0 sur 0",
    r"Page \d+",
]
    unique_patterns = []
    seen = set()
    for pattern in patterns:
        if pattern not in seen:
            unique_patterns.append(pattern)
            seen.add(pattern)

    patterns = unique_patterns

    for pattern in unique_patterns:
        text = re.sub(pattern, "", text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)
    text = re.sub(r"\n{2,}", "\n", text)
    text = re.sub(r" +", " ", text)
    return text.strip()

# Read and clean all chunk files
all_documents = []

for filename in tqdm(os.listdir(data_folder), desc="Loading files"):
    if chunk_pattern.match(filename):
        filepath = os.path.join(data_folder, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                # Progress bar for each chunk in the file
                for chunk in tqdm(data, desc=f"Processing {filename}", leave=False):
                    clean_text = clean_chunk(chunk["content"])
                    if clean_text:
                        if "source" not in chunk["metadata"]:
                            chunk["metadata"]["source"] = filename 
                        all_documents.append(
                            Document(
                                page_content=clean_text,
                                metadata=chunk["metadata"]
                            )
                        )
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è Error reading {filename}: {e}")

print(f"üìÑ Total documents charged for vectorstore: {len(all_documents)}")

# Create embeddings
embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# Create vectorstore with all documents
db = FAISS.from_documents(all_documents, embedding_model)
db.save_local(vectorstore_path)

# Save vectorstores
print(f"‚úÖ Vectorstore saved in: {vectorstore_path}")
